#pragma kernel Init
#pragma kernel DirectionUpdate
#pragma kernel Update

#include "Packages/fotfla/ShaderLibrary/Noise.cginc"

struct ParticleData
{
    float3 position;
    float3 prevPosition;
    float3 direction;
};

RWStructuredBuffer<ParticleData> ParticleBuffer;

uint Count;
uint Seed;

float GridSize;
float3 AreaSize;

float DeltaTime;

float3 mod(float3 a, float3 b)
{
    return floor(a / b) - b;
}

[numthreads(8, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index > Count)
        return;
    
    float3 p = hash31(id.x + Seed) - 0.5;
    p = floor(p * AreaSize / GridSize) * GridSize;
    ParticleBuffer[index].position = p;
    ParticleBuffer[index].direction = float3(1, 0, 0);
    ParticleBuffer[index].prevPosition = p;
}

[numthreads(8, 1, 1)]
void DirectionUpdate(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index > Count)
        return;
    
    float3 p = hash31(id.x + Seed) - 0.5;
    float3 d = 0;
    if (abs(p.x) < abs(p.y))
    {
        if (abs(p.y) < abs(p.z))
        {
            d.z = 1 * sign(p.z);
        }
        else
        {
            d.y = 1 * sign(p.y);
        }
    }
    else
    {
        d.x = 1 * sign(p.x);
    }
    ParticleBuffer[index].direction = d;
    
    float3 pos = ParticleBuffer[index].position;
    if (abs(pos.x) > AreaSize.x * 0.5 || abs(pos.y) > AreaSize.y * 0.5 || abs(pos.z) > AreaSize.z * 0.5)
    {
        float3 p = hash31(id.x + Seed) - 0.5;
        pos = floor(p * AreaSize / GridSize) * GridSize;
        //ParticleBuffer[index].position = pos;
    }
    ParticleBuffer[index].prevPosition = pos + d * GridSize;
}

[numthreads(8, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index > Count)
        return;
    
    float3 pos = ParticleBuffer[index].prevPosition;
    float3 npos = pos + ParticleBuffer[index].direction * GridSize;
    
    ParticleBuffer[index].position = lerp(pos, npos, DeltaTime);
}
